#!/bin/bash

# Start default ruby builder
#
# 1: Package name (String)
# 2: Package build dir (String)
#
# Code: No
# Echo: No
defaultBuilder() {
  checkVersionCompatibility "1.5.0"

  requireCompiler

  local pkg pkg_dir mopts copts iopts prfx thr_num
  local start_time fail conf_file end_time grc_time

  pkg="$1"
  pkg_dir="$2"

  mopts="${MAKEOPTS}"
  copts="${CONFOPTS}"
  iopts="${INSTOPTS}"
  prfx="${XPREFIX:-${prefix}}"

  exportCompilerOpts

  if [[ ! $mopts =~ \-j\  ]] ; then
    if [[ -n "$threads" ]] ; then
      mopts="${mopts} -j $threads"
    else
      thr_num=$(getThreadsNum)
      mopts="${mopts} -j $thr_num"
    fi
  fi

  if [[ -n "$dest_dir" && ! $iopts =~ DESTDIR ]] ; then
    iopts="${iopts} DESTDIR=$dest_dir"
  fi

  pushd "$pkg_dir" &> /dev/null

    showm "Building... "

    start_time=`now`

    if checkPerms "FR" "configure" ; then
      conf_file="configure"
    elif checkPerms "FR" "Configure" ; then
      conf_file="Configure"
    elif checkPerms "FR" "config" ; then
      conf_file="config"
    else
      show "FAIL" $RED
      show ""
      show "Can't find configure file."
      doExit "$ERROR_UNKNOWN"
    fi

    exit_protect=true

    spinnerOn

    if [[ -n "$verbose" ]] ; then
      { show "./$conf_file --prefix=$prfx $copts"
        ./$conf_file --prefix="$prfx" $copts
        [[ $? -ne 0 && -n "$strict" ]] && fail=true
        show "make $mopts"
        make $mopts
        [[ $? -ne 0 ]] && fail=true
        show "make install $iopts"
        make install $iopts
        [[ $? -ne 0 ]] && fail=true
      } &>> $output
    else
      { ./$conf_file --prefix=$prfx $copts
        [[ $? -ne 0 && -n "$strict" ]] && fail=true
        make $mopts
        [[ $? -ne 0 ]] && fail=true
        make install $iopts
        [[ $? -ne 0 ]] && fail=true
      } &>> "$log"
    fi

    spinnerOff

    if [[ -n "$fail" ]] ; then
      unset exit_protect
      buildFailed "$prfx"
      return 1
    fi

    end_time=$(now)
    grc_time=$(getGraceTime "$start_time" "$end_time")

    show "${CL_GREEN}DONE${CL_NORM} ${CL_GREY}($grc_time)${CL_NORM}"

    echo -n > "$log"

    unset exit_protect

  popd &> /dev/null
}
